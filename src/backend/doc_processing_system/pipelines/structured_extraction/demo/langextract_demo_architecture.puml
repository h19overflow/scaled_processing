@startuml multi_agent_extraction_architecture
title Multi-Agent LangExtract System - Full Document Processing

skinparam Linetype ortho
skinparam Padding 10
skinparam packageStyle rectangle

' Main Components
package "Multi-Agent System" {
    class MultiAgentDemo {
        +workflow: MultiAgentWorkflow
        +results_handler: ResultsHandler
        --
        +run_demo(document_path, document_id)
        +load_document(path) : str
    }
    
    class MultiAgentWorkflow {
        +chunker: DocumentChunker
        +sequential_discovery: SequentialSchemaDiscovery
        +consolidation: SchemaConsolidation
        +config_generator: ConfigGenerator
        +workflow: StateGraph
        --
        +run_extraction(text, id) : MultiAgentState
        -_chunk_document_node()
        -_sequential_discovery_node()
        -_consolidate_schema_node()
        -_generate_config_node()
        -_extract_data_node()
    }
}

' Processing Components
package "Processing Agents" {
    class DocumentChunker {
        +max_tokens: int
        +overlap_tokens: int
        +use_tiktoken: bool
        --
        +chunk_document(text, id) : List[DocumentChunk]
        -_tiktoken_chunk(text) : List[DocumentChunk]
        -_simple_chunk(text) : List[DocumentChunk]
        +get_chunk_summary(chunks) : Dict
    }
    
    class SequentialSchemaDiscovery {
        +discovered_fields: List[FieldSchema]
        +document_type: str
        +sequential_discovery_agent: Agent
        --
        +discover_chunk_schema(chunk) : ProgressiveSchema
        +process_all_chunks(chunks) : List[ProgressiveSchema]
        +get_consolidated_schema() : DocumentSchema
        +reset()
    }
    
    class SchemaConsolidation {
        +consolidation_agent: Agent
        --
        +consolidate_schema(fields, type, max_fields) : ConsolidatedSchema
        +to_document_schema(consolidated) : DocumentSchema
        -_simple_consolidation() : ConsolidatedSchema
    }
    
    class ConfigGenerator {
        --
        +generate_config(schema) : Dict
        -_format_extraction_classes()
        -_create_examples()
    }
    
    class ResultsHandler {
        +output_dir: Path
        --
        +save_results(results) : str
        +save_summary(results) : str
        +generate_summary() : str
        -_serialize_schema()
        -_serialize_config()
    }
}

' External Dependencies
package "External Libraries" {
    class "Gemini 2.0 Flash" as Gemini <<AI Model>> {
        --
        +Sequential schema discovery across chunks
        +Schema consolidation and optimization
        +Context-aware field identification
    }
    
    class "LangExtract" as LangExtract <<Google Framework>> {
        --
        +extract(text, prompt, examples)
        +Structured data extraction
    }
    
    class "LangGraph" as LangGraph <<Workflow Engine>> {
        --
        +StateGraph workflow orchestration
        +Multi-step pipeline management
    }
    
    class "TikToken" as TikToken <<Tokenizer>> {
        --
        +Token-based chunking
        +Fallback to character chunking
    }
}

' Data Models
package "Data Models" {
    class DocumentChunk {
        +chunk_id: int
        +text: str
        +start_char: int
        +end_char: int
        +token_count: int
    }
    
    class FieldSchema {
        +field_name: str
        +field_type: str
        +description: str
        +example_text: str
        +category: str
        +subcategory: str
    }
    
    class ProgressiveSchema {
        +discovered_fields: List[FieldSchema]
        +document_type: str
        +confidence_level: str
        +chunk_coverage: int
    }
    
    class ConsolidatedSchema {
        +final_fields: List[FieldSchema]
        +document_type: str
        +optimization_notes: str
        +extraction_prompt: str
    }
    
    class MultiAgentState {
        +document_text: str
        +document_id: str
        +chunks: List[DocumentChunk]
        +progressive_results: List[ProgressiveSchema]
        +consolidated_schema: ConsolidatedSchema
        +final_schema: DocumentSchema
        +config: Dict
        +extractions: List
        +status: str
        +error: str
    }
}

' Output Files
package "Results" {
    class "Hamza_CV_Quick_extraction.json" as ExtractionFile <<file>> {
        üìä Complete multi-agent results
        21 discovered fields ‚Üí 4 optimized fields
        43 structured extractions
    }
    
    class "Hamza_CV_Quick_summary.md" as SummaryFile <<file>> {
        üìù Human-readable report
        Skills, Projects, Education, Core Strengths
        Progressive discovery summary
    }
}

' Workflow Relationships
MultiAgentDemo --> MultiAgentWorkflow : orchestrates
MultiAgentDemo --> ResultsHandler : saves results

MultiAgentWorkflow --> DocumentChunker : step 1: chunk document
MultiAgentWorkflow --> SequentialSchemaDiscovery : step 2: progressive discovery
MultiAgentWorkflow --> SchemaConsolidation : step 3: consolidate schemas
MultiAgentWorkflow --> ConfigGenerator : step 4: generate config
MultiAgentWorkflow --> LangExtract : step 5: extract data
MultiAgentWorkflow --> LangGraph : workflow engine

' Agent Dependencies
DocumentChunker --> TikToken : token-based chunking
SequentialSchemaDiscovery --> Gemini : per-chunk analysis
SchemaConsolidation --> Gemini : optimization & merging
ConfigGenerator --> LangExtract : configuration

' Data Flow
DocumentChunker --> DocumentChunk : produces
SequentialSchemaDiscovery --> ProgressiveSchema : produces
SchemaConsolidation --> ConsolidatedSchema : produces
MultiAgentWorkflow --> MultiAgentState : manages

MultiAgentState --> DocumentChunk : contains
ProgressiveSchema --> FieldSchema : contains
ConsolidatedSchema --> FieldSchema : contains

ResultsHandler --> ExtractionFile : creates
ResultsHandler --> SummaryFile : creates

' Multi-Agent Pipeline Flow
note top of MultiAgentWorkflow
    **MULTI-AGENT PIPELINE**
    1. üìÑ Chunk: 10,477 chars ‚Üí 4 chunks (800 tokens each)
    2. üîç Progressive Discovery: 21 fields across chunks
    3. üîß Consolidation: 21 fields ‚Üí 4 optimized fields  
    4. ‚ö° Extraction: 43 structured items using final schema
    
    **Key Innovation:** Each chunk builds on previous discoveries
end note

note right of SequentialSchemaDiscovery
    **SEQUENTIAL DISCOVERY**
    Chunk 0: Discovers 5 base fields
    Chunk 1: +3 new fields (aware of previous 5)
    Chunk 2: +4 new fields (aware of previous 8)
    Chunk 3: +9 new fields (aware of previous 12)
    
    Total: 21 unique fields discovered progressively
end note

note right of SchemaConsolidation
    **INTELLIGENT CONSOLIDATION**
    Input: 21 discovered fields
    Process: Remove duplicates, merge similar fields
    Optimize: Prioritize most valuable extractions
    Output: 4 high-value extraction classes
    
    Skills | Projects | Education | Core Strengths
end note

note bottom of LangExtract
    **FINAL RESULTS**
    ‚úÖ 43 structured extractions using optimized schema
    üìä Better quality vs 104 items from single-pass approach
    üéØ Targeted fields: Skills, Projects, Education, Strengths
end note

@enduml

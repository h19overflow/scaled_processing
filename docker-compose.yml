services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # ... other Kafka settings

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - kafka

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5444:5432"
    environment:
      POSTGRES_DB: document_processing
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data

  chromadb:
    image: chromadb/chroma:latest
    container_name: chromadb
    ports:
      - "8000:8000"
    volumes:
      - chromadb_data:/chroma/chroma

  weaviate:
    image: cr.weaviate.io/semitechnologies/weaviate:1.32.4
    container_name: weaviate
    ports:
      - "8080:8080"
      - "50051:50051"
    command:
      - --host
      - 0.0.0.0
      - --port
      - '8080'
      - --scheme
      - http
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: on-failure:0
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: 'node1'

  kafka-setup:
    build:
      context: .
      dockerfile: docker/Dockerfile.kafka-setup
    container_name: kafka-setup
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - POSTGRES_DSN=postgresql://postgres:postgres@postgres:5432/document_processing
    volumes:
      - .:/app
    command: python -m src.backend.doc_processing_system.messaging.orchestration.kafka_topics_setup
    restart: "no"

  postgres-setup:
    build:
      context: .
      dockerfile: docker/Dockerfile.postgres-setup
    container_name: postgres-setup
    depends_on:
      - postgres
    environment:
      - POSTGRES_DSN=postgresql://postgres:postgres@postgres:5432/document_processing
    volumes:
      - .:/app
    command: python -m src.backend.doc_processing_system.core_deps.database.setup_tables
    restart: "no"

volumes:
  postgres_data:
  chromadb_data:
  weaviate_data:

@startuml workflow_upload_processing
title Document Upload & Parallel Processing Initialization

' Define participants with file paths
participant "User" as user
participant "DocumentIngestionAPI\n(src/backend/api/endpoints/ingestion.py)" as api
participant "DoclingProcessor\n(src/backend/pipelines/document_processing/docling_processor.py)" as docling_processor
participant "KafkaProducer\n(src/backend/messaging/producers.py)" as producer
participant "Kafka Topic\n(document-received)" as kafka
participant "PrefectOrchestrator\n(src/backend/orchestration/prefect_flows.py)" as prefect

' Workflow steps
user -> api : POST /upload\n[List[UploadFile]]
note right : Model: List[UploadFile]\nFunction: upload_documents()

api -> api : validate_files()
note right : Model: Document\nFunction: FileValidator.validate()

loop for each document
    api -> docling_processor : process_document()
    note right : Model: Document\nFunction: process_with_docling()
    
    docling_processor -> docling_processor : detect_and_process()
    note right : Unified processing for all formats\nFunction: unified_extract()
    
    docling_processor -> docling_processor : extract_structure_and_content()
    note right : Model: ParsedDocument\nFunction: extract_unified_content()
    
    docling_processor -> api : parsed_document
    note right : Model: ParsedDocument\nFunction: return_processed_document()
    
    api -> producer : publish_document_event()
    note right : Model: DocumentEvent\nFunction: publish_event()
    
    producer -> kafka : send_to_topic("document-received")
    note right : Message: DocumentReceivedEvent\nTopic: document-received
end

kafka -> prefect : consume_document_events()
note right : Function: document_consumer_flow()

prefect -> prefect : initialize_parallel_workflows()
note right : Function: start_parallel_processing()

' Parallel initialization split
prefect -> prefect : start_structured_extraction_flow()
note right : Model: ParsedDocument\nFunction: trigger_extraction_workflow()

prefect -> prefect : start_rag_processing_flow()
note right : Model: ParsedDocument\nFunction: trigger_rag_workflow()

prefect -> api : workflow_initialized()
note right : Model: WorkflowStatus\nFunction: update_status()

api -> user : HTTP 202 Accepted\n[ProcessingStatus]
note right : Model: ProcessingResponse\nFunction: get_processing_status()

note over user, prefect
    **Workflow stops here - Parallel processing flows continue in separate diagrams**
    
    **Key Models:**
    • Document: Core document model with metadata
    • ParsedDocument: Document after unified Docling processing
    • DocumentEvent: Kafka message for document processing
    • WorkflowStatus: Processing status tracking
    
    **Unified Docling Processing:**
    • All Formats: PDF, DOCX, Images processed through single Docling pipeline
    • Consistent Structure: Unified structure extraction across all formats
    • Enhanced Quality: ImageAgent integration for visual analysis
    • Simplified Architecture: Single processor instead of multiple parsers
    
    **Communication Functions:**
    • upload_documents(): Handle file upload
    • process_with_docling(): Unified document processing
    • publish_event(): Send parsed document to Kafka
    • start_parallel_processing(): Initialize both flows
end note

@enduml
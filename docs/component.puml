@startuml

title RAG Processing Pipeline System - Component Architecture (Current Implementation)
left to right direction
skinparam linetype ortho
skinparam ranksep 100
skinparam nodesep 100
skinparam classAttributeIconSize 0
skinparam minClassWidth 100
skinparam arrowThickness 3
skinparam dpi 150

' === User Interface Layer ===
package "User Interface / API" #E3F2FD {
  actor User
  [Document Ingestion API] as API
  [File Validator] as Validator
}

' === File System Monitoring ===
package "File System Monitoring" #FFF8E1 {
  folder "Raw Documents" as RawDocs
  [File Watcher Service] as FileWatcher
  [Document File Handler] as FileHandler
}

' === Messaging Layer ===
package "Event-Driven Messaging" #F3E5F5 {
  queue "Kafka Event Bus" as Kafka
  [Document Producer] as DocProducer
  [Prefect Flow Consumer] as FlowConsumer
  [Topic Router] as Router
}

' === Unified Orchestration Layer ===
package "Unified Orchestration" #FFF3E0 {
  [Unified Orchestrator] as UnifiedOrch
  [Document Processing Orchestrator] as DocumentOrch
  [RAG Orchestrator] as RAGOrch
}

' === Prefect Workflow Layer ===
package "Prefect Workflows" #F8BBD9 {
  [Document Processing Flow] as DocumentFlow
  [RAG Processing Flow] as RAGFlow
  [Duplicate Detection Task] as DupTask
  [Vision Processing Task] as VisionTask
  [Document Saving Task] as SaveTask
  [Kafka Message Prep Task] as KafkaTask
  [Semantic Chunking Task] as ChunkTask
  [Boundary Refinement Task] as BoundaryTask
  [Chunk Formatting Task] as FormatTask
  [Generate Embeddings Task] as EmbedTask
  [Store Vectors Task] as StoreTask
}

' === Document Processing Pipeline ===
package "Document Processing Pipeline" #E1F5FE {
  [Docling Processor] as DoclingProcessor
  [Document Output Manager] as OutputManager
  [Vision Processor] as VisionProcessor
  [Vision Agent] as VisionAgent
  [Image Classifier] as ImageClassifier
  [Markdown Enhancer] as MarkdownEnhancer
}

' === RAG Processing Components ===
package "RAG Processing Core" #FFFDE7 {
  [Two Stage Chunker] as TwoStageChunker
  [Semantic Chunker] as SemanticChunker
  [Boundary Review Agent] as BoundaryAgent
  [Embeddings Generator] as EmbeddingsGen
  [ChromaDB Manager] as ChromaManager
  [Chunk Ingestion Engine] as ChunkIngestion
}

' === RAG Consumer Layer ===
package "RAG Consumers" #E8F5E8 {
  [Chunking Consumer] as ChunkConsumer
  [Embedding Consumer] as EmbedConsumer
  [Storage Consumer] as StorageConsumer
  [RAG Producer] as RAGProducer
}

' === Structured Extraction (Future) ===
package "Structured Extraction Flow" #FFEBEE {
  [Orchestrator Agent] as OrchestratorAgent
  [Field Discovery Agent] as FieldAgent
  [Extraction Agent Swarm] as ExtractionSwarm
}

' === Data Management ===
package "Data Persistence" #E8F5E8 {
  [Persistence Manager] as PersistMgr
  [Document Repository] as DocRepo
  [Chunk Repository] as ChunkRepo
  [Result Repository] as ResultRepo
}

package "Data Stores" #F5F5F5 {
  database "PostgreSQL\n(Metadata)" as Postgres
  database "ChromaDB\n(Vector Store)" as Chroma
  folder "Document Store\n(File System)" as FileStore
  folder "RAG Data\n(Chunks/Embeddings)" as RAGData
}

' === Query & Evaluation Layer ===
package "Query & Analytics" #E0F2F1 {
  [RAG Query Engine] as RAG
  [Ragas Evaluator] as Evaluator
  [Context Retriever] as Retriever
}

' === Monitoring & Observability ===
package "Monitoring" #FFF8E1 {
  [WandB Monitoring] as WandB
  [Metrics Collector] as Metrics
  [Performance Tracker] as Perf
}

' === Configuration ===
package "Configuration" #F3E5F5 {
  [Settings Manager] as Config
}

' === UPDATED FLOW RELATIONSHIPS ===

' 1. Unified Orchestration
UnifiedOrch --> DocumentOrch : manages document processing
UnifiedOrch --> RAGOrch : manages RAG processing
DocumentOrch --> FileWatcher : monitors files
RAGOrch --> ChunkConsumer : scales chunking consumers
RAGOrch --> EmbedConsumer : scales embedding consumers
RAGOrch --> StorageConsumer : scales storage consumers

' 2. File System Monitoring Flow
User --> RawDocs : drops file
RawDocs --> FileWatcher : monitors directory
FileWatcher --> FileHandler : detects file events
FileHandler --> DocProducer : publishes file-detected event

' 3. Document Processing Flow
DocProducer --> Kafka : sends file-detected to topic
Kafka --> FlowConsumer : delivers event
FlowConsumer --> DocumentFlow : triggers processing
DocumentFlow --> DupTask : 1. Check duplicates
DupTask --> VisionTask : 2. Process with AI (if new)
VisionTask --> SaveTask : 3. Save processed doc
SaveTask --> KafkaTask : 4. Prepare downstream messages

' 4. Enhanced Document Processing Pipeline
VisionTask --> DoclingProcessor : processes document
DoclingProcessor --> OutputManager : manages workflow
DoclingProcessor --> VisionProcessor : enhances with AI
VisionProcessor --> VisionAgent : describes images
VisionProcessor --> ImageClassifier : classifies images
VisionProcessor --> MarkdownEnhancer : enhances content

' 5. Document Output to RAG Pipeline
OutputManager --> DocProducer : prepares messages
DocProducer --> Kafka : publishes document-available event
Kafka --> ChunkConsumer : triggers RAG processing

' 6. RAG Processing Pipeline Flow (Event-Driven)
ChunkConsumer --> RAGFlow : executes chunking pipeline
RAGFlow --> ChunkTask : semantic chunking
ChunkTask --> TwoStageChunker : processes document
TwoStageChunker --> SemanticChunker : stage 1: semantic chunks
TwoStageChunker --> BoundaryAgent : stage 2: boundary refinement
ChunkConsumer --> RAGProducer : publishes chunking-complete

' 7. Embedding Processing Flow
RAGProducer --> Kafka : chunking-complete event
Kafka --> EmbedConsumer : triggers embeddings
EmbedConsumer --> RAGFlow : executes embedding pipeline
RAGFlow --> EmbedTask : generate embeddings
EmbedTask --> EmbeddingsGen : creates embeddings
EmbedConsumer --> RAGProducer : publishes embedding-ready

' 8. Vector Storage Flow
RAGProducer --> Kafka : embedding-ready event
Kafka --> StorageConsumer : triggers storage
StorageConsumer --> RAGFlow : executes storage pipeline
RAGFlow --> StoreTask : store vectors
StoreTask --> ChunkIngestion : ingests to ChromaDB
ChunkIngestion --> ChromaManager : manages collections
StorageConsumer --> RAGProducer : publishes ingestion-complete

' 9. Data Storage Flows
TwoStageChunker --> RAGData : saves chunks to file system
EmbeddingsGen --> RAGData : saves embeddings to file system
ChunkIngestion --> Chroma : stores vectors in ChromaDB
OutputManager --> FileStore : saves processed documents
OutputManager --> Postgres : saves document metadata

' 10. Query & Retrieval Flow
User --> RAG : asks questions
RAG --> Retriever : retrieves context
Retriever --> ChromaManager : queries vector store
ChromaManager --> Chroma : executes vector search
RAG --> User : returns synthesized answer

' 11. Evaluation & Monitoring
Evaluator --> RAG : evaluates performance
Metrics --> ChunkConsumer : tracks chunking metrics
Metrics --> EmbedConsumer : tracks embedding metrics
Metrics --> StorageConsumer : tracks storage metrics
Perf --> WandB : sends performance data

' 12. Future Extraction Pipeline
DocProducer --> Kafka : document-available event
Kafka --> OrchestratorAgent : triggers extraction
OrchestratorAgent --> FieldAgent : collaborates on discovery
OrchestratorAgent --> ExtractionSwarm : deploys for extraction
ExtractionSwarm --> PersistMgr : stores structured results

' Configuration Dependencies
Config ..> UnifiedOrch : provides settings
Config ..> DocumentOrch : provides settings  
Config ..> RAGOrch : provides settings
Config ..> Kafka : provides connection settings

@enduml
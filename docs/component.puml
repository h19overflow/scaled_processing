@startuml

title Scaled Document Processing System - Component Architecture (Updated)
left to right direction
skinparam linetype ortho
skinparam ranksep 100
skinparam nodesep 100
skinparam classAttributeIconSize 0
skinparam minClassWidth 100
skinparam arrowThickness 3
skinparam dpi 150

' === User Interface Layer ===
package "User Interface / API" #E3F2FD {
  actor User
  [Document Ingestion API] as API
  [File Validator] as Validator
}

' === File System Monitoring ===
package "File System Monitoring" #FFF8E1 {
  folder "Raw Documents" as RawDocs
  [File Watcher Service] as FileWatcher
  [Document File Handler] as FileHandler
}

' === Messaging Layer ===
package "Event-Driven Messaging" #F3E5F5 {
  queue "Kafka Event Bus" as Kafka
  [Document Producer] as DocProducer
  [Prefect Flow Consumer] as FlowConsumer
  [Topic Router] as Router
}

' === Workflow Orchestration Layer ===
package "Prefect Workflow Orchestration" #FFF3E0 {
  [Document Processing Orchestrator] as Orchestrator
  [Document Processing Flow] as PrefectFlow
  [Duplicate Detection Task] as DupTask
  [Vision Processing Task] as VisionTask
  [Document Saving Task] as SaveTask
  [Kafka Message Prep Task] as KafkaTask
}

' === Document Processing Pipeline ===
package "Document Processing Pipeline" #E1F5FE {
  [Docling Processor] as DoclingProcessor
  [Document Output Manager] as OutputManager
  [Vision Processor] as VisionProcessor
  [Vision Agent] as VisionAgent
  [Image Classifier] as ImageClassifier
  [Markdown Enhancer] as MarkdownEnhancer
}

' === Parallel Processing Flows ===
package "Structured Extraction Flow" #FFEBEE {
  [Orchestrator Agent] as OrchestratorAgent
  [Field Discovery Agent] as FieldAgent
  [Extraction Agent Swarm] as ExtractionSwarm
}

package "RAG Processing Flow" #FFFDE7 {
  [Semantic Chunker] as Chunker
  [Embedding Service] as EmbeddingService
  [Vector Storage] as VectorStorage
}

' === Data Management ===
package "Data Persistence" #E8F5E8 {
  [Persistence Manager] as PersistMgr
  [Document Repository] as DocRepo
  [Chunk Repository] as ChunkRepo
  [Result Repository] as ResultRepo
}

package "Data Stores" #F5F5F5 {
  database "PostgreSQL\n(Metadata)" as Postgres
  database "ChromaDB\n(Vector Store)" as Chroma
  database "Document Store\n(Files)" as FileStore
}

' === Query & Evaluation Layer ===
package "Query & Analytics" #E0F2F1 {
  [RAG Query Engine] as RAG
  [Ragas Evaluator] as Evaluator
  [Context Retriever] as Retriever
}

' === Monitoring & Observability ===
package "Monitoring" #FFF8E1 {
  [WandB Monitoring] as WandB
  [Metrics Collector] as Metrics
  [Performance Tracker] as Perf
}

' === Configuration ===
package "Configuration" #F3E5F5 {
  [Settings Manager] as Config
}

' === UPDATED FLOW RELATIONSHIPS ===

' 1. File System Monitoring Flow
User --> RawDocs : drops file
RawDocs --> FileWatcher : monitors directory
FileWatcher --> FileHandler : detects file events
FileHandler --> DocProducer : publishes file-detected event

' 2. Event-Driven Processing Flow
DocProducer --> Kafka : sends file-detected to topic
Kafka --> FlowConsumer : delivers event
FlowConsumer --> Orchestrator : coordinates services
Orchestrator --> PrefectFlow : triggers document processing

' 3. Prefect Workflow Orchestration
PrefectFlow --> DupTask : 1. Check duplicates
DupTask --> VisionTask : 2. Process with AI (if new)
VisionTask --> SaveTask : 3. Save processed doc
SaveTask --> KafkaTask : 4. Prepare downstream messages

' 4. Document Processing Pipeline
VisionTask --> DoclingProcessor : processes document
DoclingProcessor --> OutputManager : manages workflow
DoclingProcessor --> VisionProcessor : enhances with AI
VisionProcessor --> VisionAgent : describes images
VisionProcessor --> ImageClassifier : classifies images
VisionProcessor --> MarkdownEnhancer : enhances content

' 5. Document Output Management
OutputManager --> PersistMgr : saves to database
OutputManager --> DocProducer : prepares Kafka messages
KafkaTask --> DocProducer : publishes document-received event

' 6. Downstream Pipeline Triggers
DocProducer --> Kafka : sends to document-received topic
Kafka --> OrchestratorAgent : triggers extraction pipeline
Kafka --> Chunker : triggers RAG pipeline

' 7. Parallel Processing (After Document Processing Complete)
OrchestratorAgent --> FieldAgent : collaborates on discovery
OrchestratorAgent --> ExtractionSwarm : deploys for parallel extraction
Chunker --> EmbeddingService : creates embeddings from chunks
EmbeddingService --> VectorStorage : stores vectors

' 8. Data Persistence (All flows converge)
ExtractionSwarm --> PersistMgr : structured results
VectorStorage --> PersistMgr : vector data
Chunker --> PersistMgr : chunks & metadata
OrchestratorAgent --> PersistMgr : schemas

' Repository Pattern
PersistMgr --> DocRepo : document operations
PersistMgr --> ChunkRepo : chunk operations  
PersistMgr --> ResultRepo : result operations

' Data Store Connections
DocRepo --> Postgres : metadata
DocRepo --> FileStore : files
ChunkRepo --> Chroma : vectors
ChunkRepo --> Postgres : chunk metadata
ResultRepo --> Postgres : extraction results

' 8. Query Flow
User --> RAG : 9. Ask question
RAG --> Retriever : gets context
Retriever --> ChunkRepo : 10a. Retrieve chunks
Retriever --> DocRepo : 10b. Get metadata
RAG --> User : 11. Synthesized answer

' 9. Evaluation & Monitoring
Evaluator --> RAG : evaluates performance
Metrics --> ExtractionSwarm : tracks extraction metrics
Metrics --> RAG : tracks query metrics
Perf --> WandB : sends performance data
Metrics --> WandB : sends agent decisions

' Configuration Dependencies
Config ..> API : provides settings
Config ..> Prefect : provides settings
Config ..> PersistMgr : provides settings
Config ..> Kafka : provides connection settings

@enduml
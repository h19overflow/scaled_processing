@startuml
' Updated Class Diagram - RAG Processing Pipeline Architecture
title RAG Processing Pipeline - Class Diagram (Current Implementation)

' Clean layout configuration with better spacing
left to right direction
skinparam linetype ortho
skinparam ranksep 120
skinparam nodesep 120
skinparam classAttributeIconSize 0
skinparam minClassWidth 120
skinparam arrowThickness 3
skinparam dpi 150

' Color-coded layers
skinparam package {
    BorderColor #2C3E50
    FontColor #2C3E50
    FontSize 11
    FontStyle bold
    RoundCorner 8
}

skinparam class {
    BorderColor #34495E
    BackgroundColor #FFFFFF
    ArrowColor #7F8C8D
    FontSize 9
    RoundCorner 5
}

skinparam note {
    BackgroundColor #FFF3CD
    BorderColor #FFEAA7
    FontSize 8
}

' === Configuration Layer (Blue Theme) ===
package "Configuration" as config #E3F2FD {
    class Settings <<Singleton>> #BBDEFB {
        +GEMINI_API_KEY: str
        +OPENAI_API_KEY: str
        +KAFKA_BOOTSTRAP_SERVERS: list
        +CHROMA_PERSIST_DIRECTORY: str
        --
        +get_config(): dict
    }
    
    class TaskConfig #BBDEFB {
        +MAX_RETRIES: int
        +RETRY_DELAY: int
        +CHUNKING_TIMEOUT: int
        +EMBEDDING_TIMEOUT: int
        +STORAGE_TIMEOUT: int
        --
        +get_task_config(): dict
    }
}

' === Data Models (Green Theme) ===
package "Data Models" as models #E8F5E8 {
    class TextChunk #C8E6C9 {
        +chunk_id: str
        +document_id: str
        +content: str
        +chunk_index: int
        +page_number: int
        +metadata: dict
        --
        +to_dict(): dict
        +from_dict(): TextChunk
    }
    
    class ParsedDocument #C8E6C9 {
        +document_id: str
        +original_filename: str
        +content: str
        +images_dict: dict
        +page_mapping: dict
        --
        +get_content(): str
        +get_metadata(): dict
    }
    
    class BoundaryDecision #C8E6C9 {
        +decision: str
        +confidence: float
        --
        +is_merge(): bool
    }
    
    class BoundaryReviewDeps #C8E6C9 {
        +boundary_text: str
        +chunk_index: int
        --
        +validate(): bool
    }
    
    class EmbeddingResult #C8E6C9 {
        +chunk_id: str
        +embedding_vector: List[float]
        +chunk_metadata: dict
        +embedding_model: str
        --
        +to_chromadb_format(): dict
    }
}

' === Infrastructure Layer (Orange Theme) ===
package "Infrastructure" as infra #FFF3E0 {
    class UnifiedOrchestrator #FFCC80 {
        -document_orchestrator: DocumentProcessingOrchestrator
        -rag_orchestrator: RAGOrchestrator
        --
        +start(): None
        +stop(): None
        +is_running(): bool
        +get_status(): dict
    }
    
    class DocumentProcessingOrchestrator #FFCC80 {
        -file_watcher: FileWatcherService
        -prefect_consumers: List[PrefectFlowConsumer]
        -consumer_threads: List
        --
        +start(): None
        +stop(): None
        +is_running(): bool
        +get_status(): dict
    }
    
    class RAGOrchestrator #FFCC80 {
        -chunking_consumers: List[ChunkingConsumer]
        -embedding_consumers: List[EmbeddingConsumer]
        -storage_consumers: List[StorageConsumer]
        --
        +start(): None
        +stop(): None
        +get_consumer_status(): dict
    }
    
    class FileWatcherService #FFCC80 {
        -document_producer: DocumentProducer
        -event_handler: DocumentFileHandler
        -observer: Observer
        --
        +start(): None
        +stop(): None
        +is_running(): bool
    }
    
    class PrefectFlowConsumer #FFCC80 {
        -document_producer: DocumentProducer
        -processing_files: set
        --
        +get_subscribed_topics(): list
        +process_message(): bool
        +start_consuming(): None
        +stop_consuming(): None
    }
}

' === Messaging Layer (Purple Theme) ===
package "Messaging" as messaging #F3E5F5 {
    interface IEventPublisher #CE93D8 {
        +publish(): bool
        +publish_event(): bool
    }
    
    interface IEventConsumer #CE93D8 {
        +consume(): List
        +subscribe(): bool
        +get_subscribed_topics(): List
        +process_message(): bool
    }
    
    class DocumentProducer #CE93D8 {
        -connection_manager: ConnectionManager
        --
        +send_file_detected(): bool
        +send_document_received(): bool
        +send_workflow_initialized(): bool
        +send_processing_complete(): bool
    }
    
    class RAGProducer #CE93D8 {
        -connection_manager: ConnectionManager
        --
        +send_chunking_complete(): bool
        +send_embedding_ready(): bool
        +send_ingestion_complete(): bool
    }
    
    class ChunkingConsumer #CE93D8 {
        -rag_producer: RAGProducer
        -processing_documents: set
        --
        +process_message(): bool
        +_execute_chunking_pipeline(): Dict
        +_publish_chunking_complete(): None
    }
    
    class EmbeddingConsumer #CE93D8 {
        -rag_producer: RAGProducer
        -processing_documents: set
        --
        +process_message(): bool
        +_execute_embeddings_task(): Dict
        +_publish_embedding_ready(): None
    }
    
    class StorageConsumer #CE93D8 {
        -rag_producer: RAGProducer
        -processing_documents: set
        --
        +process_message(): bool
        +_execute_storage_task(): Dict
        +_publish_ingestion_complete(): None
    }
    
    class BaseKafkaConsumer #CE93D8 {
        -consumer: KafkaConsumer
        -stop_event: Event
        --
        +consume_events(): List
        +subscribe_to_topic(): bool
        +start_consuming(): None
        +stop_consuming(): None
    }
}

' === Document Processing Layer (Light Blue Theme) ===
package "Document Processing" as docprocessing #E1F5FE {
    interface IDocumentProcessor #81D4FA {
        +process_document(): IDocument
        +supports_all_formats(): bool
    }
    
    class DoclingProcessor #81D4FA {
        -vision_processor: VisionProcessor
        -output_manager: DocumentOutputManager
        --
        +process_document_with_vision(): ParsedDocument
        +process_document_with_duplicate_check(): Dict
        +_extract_images_to_dict(): Dict
        +_extract_document_context(): str
    }

    class DocumentOutputManager #81D4FA {
        -connection_manager: ConnectionManager
        -document_crud: DocumentCRUD
        -document_producer: DocumentProducer
        --
        +check_and_process_document(): Dict
        +save_processed_document(): Dict
        +prepare_kafka_message(): Dict
        +get_document_path_info(): Dict
    }

    class VisionProcessor #81D4FA {
        -classifier: ImageClassifier
        -vision_agent: VisionAgent
        -enhancer: MarkdownEnhancer
        --
        +process_document_images(): str
        +_process_with_classification(): Dict
        +_process_all_images(): Dict
    }

    class VisionAgent #81D4FA {
        +describe_image_async(): str
        +analyze_image(): dict
    }
    
    class ImageClassifier #81D4FA {
        +classify_image(): Dict
        +should_analyze(): bool
    }
    
    class MarkdownEnhancer #81D4FA {
        +enhance_content(): str
        +replace_image_placeholders(): str
    }
}

' === RAG Processing Core (Yellow Theme) ===
package "RAG Processing Core" as core #FFFDE7 {
    
    class TwoStageChunker #FFF176 {
        -_cached_semantic_chunker: SemanticChunker
        -_cached_boundary_agent: BoundaryReviewAgent
        --
        +process_document(): Dict
        +_apply_boundary_decisions(): List[str]
        +_create_text_chunks(): List[TextChunk]
        +_save_text_chunks(): Path
    }
    
    class SemanticChunker #FFF176 {
        -semantic_chunker: LangChainSemanticChunker
        -page_mapper: PageMappingUtils
        -file_processor: FileProcessingUtils
        --
        +chunk_text(): List[str]
        +_fallback_chunker(): List[str]
    }
    
    class BoundaryReviewAgent #FFF176 {
        -agent: Agent
        -context_window: int
        -model_name: str
        --
        +review_boundary(): Dict
        +review_all_boundaries(): Dict
        +create_boundary_text(): str
    }
    
    class EmbeddingsGenerator #FFF176 {
        -_cached_model: SentenceTransformer
        --
        +process_chunks(): Dict
        +_generate_batch_embeddings(): List
        +_create_chromadb_format(): Dict
    }
    
    class ChromaManager #FFF176 {
        -_cached_client: PersistentClient
        -_cached_collections: Dict
        --
        +get_collection(): Collection
        +get_collection_info(): Dict
        +delete_collection(): bool
    }
    
    class ChunkIngestionEngine #FFF176 {
        -_cached_chroma_manager: ChromaManager
        --
        +ingest_from_chromadb_ready_file(): bool
        +_store_in_chromadb(): bool
        +_prepare_chromadb_format(): Dict
    }
}

' === Agent Layer (Red Theme) ===
package "Agent Layer" as agents #FFEBEE {
    class OrchestratorAgent <<Schema Creator>> #FFCDD2 {
        +scan_document(): dict
        +identify_extractable_fields(): List
        +create_extraction_schema(): ExtractionSchema
    }
    
    class FieldDiscoveryAgent <<Discovery Agent>> #FFCDD2 {
        +discover_fields(): List
        +validate_field_patterns(): bool
        +analyze_document_structure(): dict
    }
    
    class ExtractionAgent <<Worker Swarm>> #FFCDD2 {
        +extract_fields(): ExtractionResult
        +process_parallel(): List[ExtractionResult]
        +validate_results(): bool
        +merge_swarm_results(): ExtractionResult
    }
}

' === Prefect Workflow Layer (Lavender Theme) ===
package "Prefect Workflows" as prefect #F8BBD9 {
    class DocumentProcessingFlow #F48FB1 {
        +document_processing_flow(): Dict
        +process_document_with_flow(): Dict
    }
    
    class RAGProcessingFlow #F48FB1 {
        +rag_processing_flow(): Dict
        --
        +semantic_chunking_task(): Dict
        +boundary_refinement_task(): Dict
        +chunk_formatting_task(): Dict
        +generate_embeddings_task(): Dict
        +store_vectors_task(): Dict
    }
    
    class DuplicateDetectionTask #F48FB1 {
        +duplicate_detection_task(): Dict
    }
    
    class VisionProcessingTask #F48FB1 {
        +vision_processing_task(): Dict
    }
    
    class DocumentSavingTask #F48FB1 {
        +document_saving_task(): Dict
    }
    
    class KafkaMessagePrepTask #F48FB1 {
        +kafka_message_preparation_task(): Dict
    }
}

' === Query & Evaluation (Cyan Theme) ===
package "Query & Evaluation" as query #E0F2F1 {
    class RAGQueryEngine #80CBC4 {
        +query(): str
        +retrieve_context(): List
        +generate_answer(): str
        +rank_results(): List
    }
    
    class RagasEvaluator #80CBC4 {
        +evaluate_performance(): dict
        +generate_metrics(): Report
        +compare_results(): dict
    }
}

' === Updated Relationships ===

' Interface implementations
DoclingProcessor ..|> IDocumentProcessor
DocumentProducer ..|> IEventPublisher
RAGProducer ..|> IEventPublisher
ChunkingConsumer ..|> IEventConsumer
EmbeddingConsumer ..|> IEventConsumer
StorageConsumer ..|> IEventConsumer
BaseKafkaConsumer ..|> IEventConsumer

' Orchestration Hierarchy
UnifiedOrchestrator --> DocumentProcessingOrchestrator : manages
UnifiedOrchestrator --> RAGOrchestrator : manages
DocumentProcessingOrchestrator --> FileWatcherService : manages
DocumentProcessingOrchestrator --> PrefectFlowConsumer : manages
RAGOrchestrator --> ChunkingConsumer : manages
RAGOrchestrator --> EmbeddingConsumer : manages
RAGOrchestrator --> StorageConsumer : manages

' Configuration dependencies
Settings ..> UnifiedOrchestrator : injects config
TaskConfig ..> RAGProcessingFlow : provides task config

' File System Monitoring Flow
FileWatcherService --> DocumentProducer : publishes file events

' Document Processing Flow
PrefectFlowConsumer --> DocumentProcessingFlow : triggers flow
DocumentProcessingFlow --> DuplicateDetectionTask : step 1
DuplicateDetectionTask --> VisionProcessingTask : step 2
VisionProcessingTask --> DocumentSavingTask : step 3
DocumentSavingTask --> KafkaMessagePrepTask : step 4

' Enhanced Document Processing
VisionProcessingTask --> DoclingProcessor : processes document
DoclingProcessor --> DocumentOutputManager : manages output
DoclingProcessor --> VisionProcessor : enhances with AI
VisionProcessor --> VisionAgent : describes images
VisionProcessor --> ImageClassifier : classifies images
VisionProcessor --> MarkdownEnhancer : enhances content

' RAG Processing Pipeline Flow
ChunkingConsumer --> RAGProcessingFlow : triggers chunking
RAGProcessingFlow --> TwoStageChunker : semantic chunking
TwoStageChunker --> SemanticChunker : stage 1
TwoStageChunker --> BoundaryReviewAgent : stage 2
EmbeddingConsumer --> EmbeddingsGenerator : generates embeddings
StorageConsumer --> ChunkIngestionEngine : stores in ChromaDB

' Core Dependencies
TwoStageChunker --> TextChunk : creates
BoundaryReviewAgent --> BoundaryDecision : produces
EmbeddingsGenerator --> EmbeddingResult : creates
ChunkIngestionEngine --> ChromaManager : uses for storage

' Data Model Relationships
ParsedDocument --> TextChunk : chunked into
TextChunk --> EmbeddingResult : embedded as
BoundaryReviewDeps --> BoundaryDecision : analyzed to

' Producer-Consumer Message Flow
DocumentProducer --> ChunkingConsumer : document-available topic
ChunkingConsumer --> RAGProducer : chunking-complete
RAGProducer --> EmbeddingConsumer : chunking-complete topic
EmbeddingConsumer --> RAGProducer : embedding-ready
RAGProducer --> StorageConsumer : embedding-ready topic
StorageConsumer --> RAGProducer : ingestion-complete

' Agent Relationships
OrchestratorAgent --> FieldDiscoveryAgent : collaborates
OrchestratorAgent --> ExtractionAgent : deploys
BoundaryReviewAgent --> BoundaryDecision : produces decisions

' Query Flow
RAGQueryEngine --> ChromaManager : queries vectors
RAGQueryEngine --> RagasEvaluator : evaluated by

@enduml